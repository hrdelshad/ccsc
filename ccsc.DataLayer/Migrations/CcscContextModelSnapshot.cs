// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ccsc.DataLayer.Context;

namespace ccsc.DataLayer.Migrations
{
    [DbContext(typeof(CcscContext))]
    partial class CcscContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChangeSetSubSystem", b =>
                {
                    b.Property<int>("ChangeSetsChangeSetId")
                        .HasColumnType("int");

                    b.Property<int>("SubSystemsSubSystemId")
                        .HasColumnType("int");

                    b.HasKey("ChangeSetsChangeSetId", "SubSystemsSubSystemId");

                    b.HasIndex("SubSystemsSubSystemId");

                    b.ToTable("ChangeSetSubSystem");
                });

            modelBuilder.Entity("ChangeSetUserType", b =>
                {
                    b.Property<int>("ChangeSetsChangeSetId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypesUserTypeId")
                        .HasColumnType("int");

                    b.HasKey("ChangeSetsChangeSetId", "UserTypesUserTypeId");

                    b.HasIndex("UserTypesUserTypeId");

                    b.ToTable("ChangeSetUserType");
                });

            modelBuilder.Entity("ContractSubSystem", b =>
                {
                    b.Property<int>("ContractsContractId")
                        .HasColumnType("int");

                    b.Property<int>("SubSystemsSubSystemId")
                        .HasColumnType("int");

                    b.HasKey("ContractsContractId", "SubSystemsSubSystemId");

                    b.HasIndex("SubSystemsSubSystemId");

                    b.ToTable("ContractSubSystem");
                });

            modelBuilder.Entity("FaqSubSystem", b =>
                {
                    b.Property<int>("FaqsFaqId")
                        .HasColumnType("int");

                    b.Property<int>("SubSystemsSubSystemId")
                        .HasColumnType("int");

                    b.HasKey("FaqsFaqId", "SubSystemsSubSystemId");

                    b.HasIndex("SubSystemsSubSystemId");

                    b.ToTable("FaqSubSystem");
                });

            modelBuilder.Entity("FaqUserType", b =>
                {
                    b.Property<int>("FaqsFaqId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypesUserTypeId")
                        .HasColumnType("int");

                    b.HasKey("FaqsFaqId", "UserTypesUserTypeId");

                    b.HasIndex("UserTypesUserTypeId");

                    b.ToTable("FaqUserType");
                });

            modelBuilder.Entity("SubSystemVideo", b =>
                {
                    b.Property<int>("SubSystemsSubSystemId")
                        .HasColumnType("int");

                    b.Property<int>("VideosVideoId")
                        .HasColumnType("int");

                    b.HasKey("SubSystemsSubSystemId", "VideosVideoId");

                    b.HasIndex("VideosVideoId");

                    b.ToTable("SubSystemVideo");
                });

            modelBuilder.Entity("UserTypeVideo", b =>
                {
                    b.Property<int>("UserTypesUserTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VideosVideoId")
                        .HasColumnType("int");

                    b.HasKey("UserTypesUserTypeId", "VideosVideoId");

                    b.HasIndex("VideosVideoId");

                    b.ToTable("UserTypeVideo");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.ChangeSets.ChangeSet", b =>
                {
                    b.Property<int>("ChangeSetId")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ChangeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<string>("Quarter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("ChangeSetId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("VideoId");

                    b.ToTable("ChangeSets");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.ChangeSets.ChangeType", b =>
                {
                    b.Property<int>("ChangeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ChangeTypeId");

                    b.ToTable("ChangeTypes");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.ChangeSets.SubSystem", b =>
                {
                    b.Property<int>("SubSystemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SubSystemId");

                    b.ToTable("SubSystems");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Common.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contacts.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("SalutationId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PostId");

                    b.HasIndex("SalutationId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contacts.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contacts.Post", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contacts.Salutation", b =>
                {
                    b.Property<int>("SalutationId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SalutationId");

                    b.HasIndex("GenderId");

                    b.ToTable("Salutations");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contracts.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ContractNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ContractStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("UnLimited")
                        .HasColumnType("bit");

                    b.HasKey("ContractId");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contracts.ContractCours", b =>
                {
                    b.Property<int>("ContractCoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("ContractCoursId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CourseId");

                    b.ToTable("ContractCourses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contracts.ContractStatus", b =>
                {
                    b.Property<int>("ContractStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOk")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ContractStatusId");

                    b.ToTable("ContractStatuses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contracts.ContractType", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContractTypeId");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Courses.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseLevelId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Courses.CourseLevel", b =>
                {
                    b.Property<int>("CourseLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseLevelId");

                    b.ToTable("CourseLevels");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AfterXDay")
                        .HasColumnType("int");

                    b.Property<int>("CustomerStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasUnSupportedContract")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActiveSms")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinSmsCredit")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("SendSmsDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SmsCredit")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("SmsCreditCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmsPass")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SmsUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UniversityCode")
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VersionCheckDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerStatusId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.CustomerStatus", b =>
                {
                    b.Property<int>("CustomerStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CustomerStatusId");

                    b.ToTable("CustomerStatuses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CustomerTypeId");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.Os", b =>
                {
                    b.Property<int>("OsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OsId");

                    b.ToTable("Oses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Hard")
                        .HasColumnType("int");

                    b.Property<int>("OsId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Ram")
                        .HasColumnType("int");

                    b.Property<int>("ServerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SqlVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Vpn")
                        .HasColumnType("bit");

                    b.HasKey("ServerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OsId");

                    b.HasIndex("ServerTypeId");

                    b.HasIndex("SqlVersionId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.ServerType", b =>
                {
                    b.Property<int>("ServerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ServerTypeId");

                    b.ToTable("ServerTypes");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.SqlVersion", b =>
                {
                    b.Property<int>("SqlVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SqlVersionId");

                    b.ToTable("SqlVersions");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GivenOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LogedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GivenOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("GeneratedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Requests.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("RequestChanelId")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RequestId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RequestChanelId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("SubSystemId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Requests.RequestChannel", b =>
                {
                    b.Property<int>("RequestChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RequestChannelId");

                    b.ToTable("RequestChannels");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Requests.RequestStatus", b =>
                {
                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RequestStatusId");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Requests.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyByEnum")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.Duty", b =>
                {
                    b.Property<int>("DutyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DuoDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DutyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DutyStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DutyId");

                    b.HasIndex("DutyStatusId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Duties");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.DutyStatus", b =>
                {
                    b.Property<int>("DutyStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DutyStatusId");

                    b.ToTable("DutyStatuses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ServiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ServiceStatusId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.ServiceStatus", b =>
                {
                    b.Property<int>("ServiceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOk")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceStatusId");

                    b.ToTable("ServiceStatuses");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Tutorials.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("FaqId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VideoId");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Tutorials.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Tutorials.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("VideoId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Users.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAvatar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AppUserId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("ChangeSetSubSystem", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.ChangeSet", null)
                        .WithMany()
                        .HasForeignKey("ChangeSetsChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.SubSystem", null)
                        .WithMany()
                        .HasForeignKey("SubSystemsSubSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChangeSetUserType", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.ChangeSet", null)
                        .WithMany()
                        .HasForeignKey("ChangeSetsChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.UserType", null)
                        .WithMany()
                        .HasForeignKey("UserTypesUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractSubSystem", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Contracts.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractsContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.SubSystem", null)
                        .WithMany()
                        .HasForeignKey("SubSystemsSubSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FaqSubSystem", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.Faq", null)
                        .WithMany()
                        .HasForeignKey("FaqsFaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.SubSystem", null)
                        .WithMany()
                        .HasForeignKey("SubSystemsSubSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FaqUserType", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.Faq", null)
                        .WithMany()
                        .HasForeignKey("FaqsFaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.UserType", null)
                        .WithMany()
                        .HasForeignKey("UserTypesUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubSystemVideo", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.SubSystem", null)
                        .WithMany()
                        .HasForeignKey("SubSystemsSubSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.Video", null)
                        .WithMany()
                        .HasForeignKey("VideosVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserTypeVideo", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.UserType", null)
                        .WithMany()
                        .HasForeignKey("UserTypesUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.Video", null)
                        .WithMany()
                        .HasForeignKey("VideosVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.ChangeSets.ChangeSet", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Users.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.ChangeType", "ChangeType")
                        .WithMany()
                        .HasForeignKey("ChangeTypeId");

                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");

                    b.Navigation("AppUser");

                    b.Navigation("ChangeType");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contacts.Contact", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Customers.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Contacts.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Contacts.Salutation", "Salutation")
                        .WithMany()
                        .HasForeignKey("SalutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Post");

                    b.Navigation("Salutation");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contacts.Salutation", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Contacts.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contracts.Contract", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Contracts.ContractStatus", "ContractStatus")
                        .WithMany()
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Customers.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractStatus");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Contracts.ContractCours", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Contracts.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Courses.Course", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Courses.CourseLevel", "CourseLevel")
                        .WithMany()
                        .HasForeignKey("CourseLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseLevel");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.Customer", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Customers.CustomerStatus", "CustomerStatus")
                        .WithMany()
                        .HasForeignKey("CustomerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Customers.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerStatus");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.Server", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Customers.Customer", "Customer")
                        .WithMany("Servers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Customers.Os", "Os")
                        .WithMany()
                        .HasForeignKey("OsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Customers.ServerType", "ServerType")
                        .WithMany()
                        .HasForeignKey("ServerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Customers.SqlVersion", "SqlVersion")
                        .WithMany()
                        .HasForeignKey("SqlVersionId");

                    b.Navigation("Customer");

                    b.Navigation("Os");

                    b.Navigation("ServerType");

                    b.Navigation("SqlVersion");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Identity.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Requests.Request", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Contacts.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("ccsc.DataLayer.Entities.Customers.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Requests.RequestChannel", "RequestChanel")
                        .WithMany()
                        .HasForeignKey("RequestChanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Requests.RequestStatus", "RequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Requests.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.ChangeSets.SubSystem", "SubSystem")
                        .WithMany()
                        .HasForeignKey("SubSystemId");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("RequestChanel");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("SubSystem");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.Duty", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Services.DutyStatus", "DutyStatus")
                        .WithMany()
                        .HasForeignKey("DutyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Requests.Request", "Request")
                        .WithMany("Duties")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("ccsc.DataLayer.Entities.Services.ServiceType", null)
                        .WithMany("Duties")
                        .HasForeignKey("ServiceTypeId");

                    b.Navigation("DutyStatus");

                    b.Navigation("Request");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.Service", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Customers.Customer", null)
                        .WithMany("Services")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ccsc.DataLayer.Entities.Requests.Request", "Request")
                        .WithMany("Services")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Services.ServiceStatus", "ServiceStatus")
                        .WithMany()
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccsc.DataLayer.Entities.Services.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("ServiceStatus");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Tutorials.Faq", b =>
                {
                    b.HasOne("ccsc.DataLayer.Entities.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("ccsc.DataLayer.Entities.Tutorials.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");

                    b.Navigation("Customer");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Customers.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Contracts");

                    b.Navigation("Requests");

                    b.Navigation("Servers");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Identity.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Requests.Request", b =>
                {
                    b.Navigation("Duties");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ccsc.DataLayer.Entities.Services.ServiceType", b =>
                {
                    b.Navigation("Duties");
                });
#pragma warning restore 612, 618
        }
    }
}
